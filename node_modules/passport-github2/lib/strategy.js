/**
 * Module dependencies.
 */
  var  url = require('url')
  , util = require('util')
  , utils = require('./utils')
  , OAuth2Strategy = require('passport-oauth2')
  , AuthorizationError = require('./errors/authorizationerror')
  , TokenError = require('./errors/tokenerror')
  , InternalOAuthError = require('./errors/internaloautherror')
  , nconf = require.main.require('nconf');
/**
 * `Strategy` constructor.
 *
 * The GitHub authentication strategy authenticates requests by delegating to
 * GitHub using the OAuth 2.0 protocol.
 *
 * Applications must supply a `verify` callback which accepts an `accessToken`,
 * `refreshToken` and service-specific `profile`, and then calls the `done`
 * callback supplying a `user`, which should be set to `false` if the
 * credentials are not valid.  If an exception occured, `err` should be set.
 *
 * Options:
 *   - `clientID`      your GitHub application's Client ID
 *   - `clientSecret`  your GitHub application's Client Secret
 *   - `callbackURL`   URL to which GitHub will redirect the user after granting authorization
 *   - `scope`         array of permission scopes to request. Valid scopes include:
 *                     'user', 'public_repo', 'repo', 'gist', or none.
 *                     (see http://developer.github.com/v3/oauth/#scopes for more info)
 *   â€” `userAgent`     All API requests MUST include a valid User Agent string.
 *                     e.g: domain name of your application.
 *                     (see http://developer.github.com/v3/#user-agent-required for more info)
 *
 * Examples:
 *
 *     passport.use(new GitHubStrategy({
 *         clientID: '123-456-789',
 *         clientSecret: 'shhh-its-a-secret',
 *         callbackURL: 'https://www.example.net/auth/github/callback',
 *         userAgent: 'myapp.com'
 *       },
 *       function(accessToken, refreshToken, profile, done) {
 *         User.findOrCreate(..., function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
function Strategy(options, verify) {
  options = options || {};
  options.authorizationURL = options.authorizationURL ||nconf.get('oauth:authorizationUrl') ;
  options.tokenURL = options.tokenURL || nconf.get('oauth:tokenUrl');
  options.scopeSeparator = options.scopeSeparator || ' ';
  options.customHeaders = options.customHeaders || {};
  //options.scope='openid,profile,address,roles,offline_access,multichannelmanagement';
  // options.responseType='code id_token token';
  // options.response_mode='form_post';
  //options.nonce='636822043901975912.MTRkZTg2OGItMGQ1NC00YjllLWEyNTQtYmIyYTQ5NWE1OTVmYjQyMmU2MGItNzhiNy00ZjFmLWE1YmUtZjAyMjI5YmJiZTM4';
  //options.state='OpenIdConnect.AuthenticationProperties%253d4Q-zsWH_hN2ZmZiv7GDD50wjiKmRuhnB_TB7WHOL2mzJ-iGj_XjSZtmdOgenRO19w0mbFFGD9D95vw-o4xKogRHzug3umb3F1W5KJabUZI_dNKRvOQuaUf5_3f_OKeUPdMQ6gLgz7-cN9dE87N2RcdSsG6ypC8YYj4mCEFEA6RkQYBJDOYC-D1uJStmP3QidVTi5WUKEqflog0mSeDH9m60TKHZuBpso7I2wh-yZ-ok%26nonce%3D636815917947259049.ZjhlYWQwYjctYzZiZS00NjQ2LTlmMzYtYzBkOGQ2ZjBiZjRmNDZiNGFiODYtNmQ1Mi00MzRkLTgzZTQtZTY1MTZjMzhjZjE3';
  

  if (!options.customHeaders['User-Agent']) {
    options.customHeaders['User-Agent'] = options.userAgent || 'passport-github';
  }

  OAuth2Strategy.call(this, options, verify);
  this.name = 'sso';
  this._userProfileURL = options.userProfileURL || nconf.get('oauth:userinfoUrl');
  //this._userEmailURL = options.userEmailURL || 'https://api.github.com/user/emails';
  this._oauth2.useAuthorizationHeaderforGET(true);
}

/**
 * Inherit from `OAuth2Strategy`.
 */
util.inherits(Strategy, OAuth2Strategy);



/**
 * Authenticate request by delegating to a service provider using OAuth 2.0.
 *
 * @param {Object} req
 * @api protected
 */
Strategy.prototype.authenticate = function(req, options) {
  options = options || {};
  var self = this;

  if (req.query && req.query.error) {
    if (req.query.error == 'access_denied') {
      return this.fail({ message: req.query.error_description });
    } else {
      return this.error(new AuthorizationError(req.query.error_description, req.query.error, req.query.error_uri));
    }
  }

  var callbackURL = options.callbackURL || this._callbackURL;
  if (callbackURL) {
    var parsed = url.parse(callbackURL);
    if (!parsed.protocol) {
      // The callback URL is relative, resolve a fully qualified URL from the
      // URL of the originating request.
      callbackURL = url.resolve(utils.originalURL(req, { proxy: this._trustProxy }), callbackURL);
    }
  }
  
  var meta = {
    authorizationURL: this._oauth2._authorizeUrl,
    tokenURL: this._oauth2._accessTokenUrl,
    clientID: this._oauth2._clientId
  }

  if (req.query && req.query.code) {
    function loaded(err, ok, state) {
      if (err) { return self.error(err); }
      if (!ok) {
        return self.fail(state, 403);
      }
  
      var code = req.query.code;

      var params = self.tokenParams(options);
      params.grant_type = 'authorization_code';
      if (callbackURL) { params.redirect_uri = callbackURL; }

      if(req.query.access_token){
        var accessToken=req.query.access_token;
        self._loadUserProfile(accessToken, function(err, profile) {
          if (err) { return self.error(err); }

          function verified(err, user, info) {
            if (err) { return self.error(err); }
            if (!user) { return self.fail(info); }
            
            info = info || {};
            if (state) { info.state = state; }
            self.success(user, info);
          }

          try {
            if (self._passReqToCallback) {
              var arity = self._verify.length;
              if (arity == 6) {
                self._verify(req, accessToken, params, profile, verified);
              } else { // arity == 5
                self._verify(req, accessToken, profile, verified);
              }
            } else {
              var arity = self._verify.length;
              if (arity == 5) {
                self._verify(accessToken, params, profile, verified);
              } else { // arity == 4
                self._verify(accessToken, profile, verified);
              }
            }
          } catch (ex) {
            return self.error(ex);
          }
        });
      }else{

        self._oauth2.getOAuthAccessToken(code, params,
          function(err, accessToken, refreshToken, params) {
            if (err) { return self.error(self._createOAuthError('Failed to obtain access token', err)); }
  
            self._loadUserProfile(accessToken, function(err, profile) {
              if (err) { return self.error(err); }
  
              function verified(err, user, info) {
                if (err) { return self.error(err); }
                if (!user) { return self.fail(info); }
                
                info = info || {};
                if (state) { info.state = state; }
                self.success(user, info);
              }
  
              try {
                if (self._passReqToCallback) {
                  var arity = self._verify.length;
                  if (arity == 6) {
                    self._verify(req, accessToken, refreshToken, params, profile, verified);
                  } else { // arity == 5
                    self._verify(req, accessToken, refreshToken, profile, verified);
                  }
                } else {
                  var arity = self._verify.length;
                  if (arity == 5) {
                    self._verify(accessToken, refreshToken, params, profile, verified);
                  } else { // arity == 4
                    self._verify(accessToken, refreshToken, profile, verified);
                  }
                }
              } catch (ex) {
                return self.error(ex);
              }
            });
          }
        );

      }

      
    }
    
    var state = req.query.state;
    try {
      var arity = this._stateStore.verify.length;
      if (arity == 4) {
        this._stateStore.verify(req, state, meta, loaded);
      } else { // arity == 3
        this._stateStore.verify(req, state, loaded);
      }
    } catch (ex) {
      return this.error(ex);
    }
  } else {
    var params = this.authorizationParams(options);
    params.response_type = 'code';
    if (callbackURL) { params.redirect_uri = callbackURL; }
    var scope = options.scope || this._scope;
    if (scope) {
      if (Array.isArray(scope)) { scope = scope.join(this._scopeSeparator); }
      params.scope = scope;
    }

    var state = options.state;
    
    params.nonce=nconf.get('oauth:nonce');
    if (state) {
      params.state = state;
      
      var parsed = url.parse(this._oauth2._authorizeUrl, true);
      utils.merge(parsed.query, params);
      parsed.query['client_id'] = this._oauth2._clientId;
      delete parsed.search;
      var location = url.format(parsed);
      this.redirect(location);
    } else {
      function stored(err, state) {
        if (err) { return self.error(err); }

        if (state) { params.state = state; }
        var parsed = url.parse(self._oauth2._authorizeUrl, true);
        utils.merge(parsed.query, params);
        parsed.query['client_id'] = self._oauth2._clientId;
        delete parsed.search;
        var location = url.format(parsed);
        self.redirect(location);
      }
      
      try {
        var arity = this._stateStore.store.length;
        if (arity == 3) {
          this._stateStore.store(req, meta, stored);
        } else { // arity == 2
          this._stateStore.store(req, stored);
        }
      } catch (ex) {
        return this.error(ex);
      }
    }
  }
};
/**
 * Retrieve user profile from GitHub.
 *
 * This function constructs a normalized profile, with the following properties:
 *
 *   - `provider`         always set to `github`
 *   - `id`               the user's GitHub ID
 *   - `username`         the user's GitHub username
 *   - `displayName`      the user's full name
 *   - `profileUrl`       the URL of the profile for the user on GitHub
 *   - `emails`           the user's email addresses
 *
 * @param {String} accessToken
 * @param {Function} done
 * @api protected
 */
Strategy.prototype.userProfile = function(accessToken, done) {
  var self = this;

  this._oauth2.get(this._userProfileURL, accessToken, function (err, body, res) {
    var json;

    if (err) {
      return done(new InternalOAuthError('Failed to fetch user profile', err));
    }

    try {
      json = JSON.parse(body);
    } catch (ex) {
      return done(new Error('Failed to parse user profile'));
    }

    var profile =  {};
    profile.id=json.sub;
    // var username='test.username';
					// var email='test@asseco-see.mk'
    profile.username=json.name;
    profile.email=json.email;
    profile.provider  = 'identityServer';
    // profile._raw = body;
    // profile._json = json;

    var canAccessEmail = false;
    var scopes = self._scope;
    if (typeof scopes === 'string') {
      scopes = scopes.split(self._scopeSeparator);
    }
    if (Array.isArray(scopes)) {
      canAccessEmail = scopes.some(function(scope) {
        return scope === 'user' || scope === 'user:email';
      });
    }
    if (!canAccessEmail) {
      return done(null, profile);
    }

    // Getting emails
    self._oauth2.get(self._userEmailURL, accessToken, function (err, body, res) {
      if (err) {
        return done(new InternalOAuthError('Failed to fetch user emails', err));
      }

      var json = JSON.parse(body);

      for (var index in json) {
        if (json[index].primary) {
          profile.emails = [{ value: json[index].email }];
          break;
        }
      }

      done(null, profile);
    });
  });
};


originalURL= function(req, options) {
  options = options || {};
  var app = req.app;
  if (app && app.get && app.get('trust proxy')) {
    options.proxy = true;
  }
  var trustProxy = options.proxy;
  
  var proto = (req.headers['x-forwarded-proto'] || '').toLowerCase()
    , tls = req.connection.encrypted || (trustProxy && 'https' == proto.split(/\s*,\s*/)[0])
    , host = (trustProxy && req.headers['x-forwarded-host']) || req.headers.host
    , protocol = tls ? 'https' : 'http'
    , path = req.url || '';
  return protocol + '://' + host + path;
};
/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
