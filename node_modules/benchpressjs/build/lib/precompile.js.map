{"version":3,"sources":["../../lib/precompile.js"],"names":["uglifyjs","require","prefixer","tokenizer","parser","compiler","blocks","codegen","wrap","compiled","replace","compileFallback","source","opts","prefixed","tokens","parsed","fnAst","ast","code","minified","minify","wrapped","result","error","compile","e","console","warn","process","platform","precompile","options","callback","promise","Promise","try","Object","assign","defaults","Error","unsafe","native","then","nextTick","err","module","exports"],"mappings":"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","file":"precompile.js","sourcesContent":["'use strict';\n\nconst uglifyjs = require('uglify-js');\n\nconst prefixer = require('./compiler/prefixer');\nconst tokenizer = require('./compiler/tokenizer');\nconst parser = require('./compiler/parser');\nconst compiler = require('./compiler/compiler');\nconst blocks = require('./compiler/blocks');\nconst codegen = require('./compiler/codegen');\n\nfunction wrap(compiled) {\n  return `\n(function (factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  }\n})(function () {\n  ${compiled.replace(/\\n/g, '\\n\\t')}\n\n  return compiled;\n});\n  `;\n}\n\nfunction compileFallback(source, opts) {\n  const prefixed = prefixer(source);\n  const tokens = tokenizer(prefixed);\n  const parsed = parser(tokens);\n  const fnAst = compiler(parsed, opts);\n  const ast = blocks(fnAst);\n  const code = codegen(ast, { minified: opts.minify });\n\n  return wrap(code);\n}\n\nfunction minify(wrapped) {\n  const result = uglifyjs.minify(wrapped);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  return result.code;\n}\n\nconst compile = (() => {\n  try {\n    // eslint-disable-next-line global-require, import/no-unresolved\n    return require('../../rust/benchpress-rs').compile;\n  } catch (e) {\n    /* eslint-disable no-console */\n    console.warn('[benchpressjs] Unable to build or find a suitable native module, falling back to JS version');\n    if (process.platform === 'win32') {\n      console.warn('[benchpressjs] On Windows, make sure the VS2015 Redistributable binaries are installed');\n    }\n    /* eslint-enable no-console */\n    return compileFallback;\n  }\n})();\n\n/**\n * Precompile a benchpress template\n * - `precompiled(source, options): Promise<string>`\n * - `precompile(source, options, callback) => callback(err, output)`\n * - `precompile({ source, ...options }, callback) => callback(err, output)`\n *\n * @param {string} source - Template source\n * @param {Object} options\n * @param {boolean} [options.minify = false] - Output minified code\n * @param {boolean} [options.unsafe = false] - Disable safety checks, will throw on misshapen data\n * @param {boolean} [options.native = true] - Use the native Rust compiler if available\n * @param {function} [callback] - (err, output)\n * @returns {Promise<string>} - output code\n */\nfunction precompile(source, options, callback) {\n  if (typeof source === 'object' && typeof options === 'function') {\n    callback = options;\n    options = source;\n    source = options.source;\n  }\n\n  const promise = Promise.try(() => {\n    const opts = Object.assign({}, precompile.defaults, options);\n\n    if (typeof source !== 'string') {\n      throw Error('source must be a string');\n    }\n\n    // benchpress-rs doesn't support unsafe yet\n    const compiled = (opts.unsafe || opts.native === false ? compileFallback : compile)(\n      source,\n      opts\n    );\n    return opts.minify ? minify(compiled) : compiled;\n  });\n\n  if (callback) {\n    promise.then(\n      code => process.nextTick(callback, null, code),\n      err => process.nextTick(callback, err),\n    );\n  }\n\n  return promise;\n}\n\nprecompile.defaults = {\n  minify: false,\n  unsafe: false,\n  native: true,\n};\n\nmodule.exports = precompile;\n"]}