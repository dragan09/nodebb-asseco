{"version":3,"sources":["../../lib/compile-render.js"],"names":["md5","require","Cache","Benchpress","precompile","runtime","evaluate","compileRenderCache","stdTTL","useClones","compileRender","templateSource","data","block","hash","Promise","try","cached","get","ttl","templateFunction","then","code","set","blocks","helpers","catch","err","message","slice","stack","compileParse","callback","output","process","nextTick","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,MAAMC,QAAQD,QAAQ,YAAR,CAAd;;AAEA,MAAME,aAAaF,QAAQ,cAAR,CAAnB;AACA,MAAMG,aAAaH,QAAQ,cAAR,CAAnB;AACA,MAAMI,UAAUJ,QAAQ,WAAR,CAAhB;AACA,MAAMK,WAAWL,QAAQ,YAAR,CAAjB;;AAEA,MAAMM,qBAAqB,IAAIL,KAAJ,CAAU;AACnCM,UAAQ,KAAK,EADsB,EAClB;AACjBC,aAAW;AAFwB,CAAV,CAA3B;;AAKA;;;;;;;;AAQA,SAASC,aAAT,CAAuBC,cAAvB,EAAuCC,IAAvC,EAA6CC,KAA7C,EAAoD;AAClD,QAAMC,OAAOd,IAAIW,cAAJ,CAAb;;AAEA,SAAOI,QAAQC,GAAR,CAAY,MAAM;AACvB,UAAMC,SAASV,mBAAmBW,GAAnB,CAAuBJ,IAAvB,CAAf;AACA,QAAIG,MAAJ,EAAY;AACVV,yBAAmBY,GAAnB,CAAuBL,IAAvB;AACA,aAAOG,MAAP;AACD;;AAED,UAAMG,mBAAmBhB,WAAWO,cAAX,EAA2B,EAA3B,EACtBU,IADsB,CACjBC,QAAQhB,SAASgB,IAAT,CADS,CAAzB;;AAGAf,uBAAmBgB,GAAnB,CAAuBT,IAAvB,EAA6BM,gBAA7B;AACA,WAAOA,gBAAP;AACD,GAZM,EAYJC,IAZI,CAYED,gBAAD,IAAsB;AAC5B,QAAIP,KAAJ,EAAW;AACTO,yBAAmBA,iBAAiBI,MAAjB,IAA2BJ,iBAAiBI,MAAjB,CAAwBX,KAAxB,CAA9C;AACD;AACD,QAAI,CAACO,gBAAL,EAAuB;AACrB,aAAO,EAAP;AACD;;AAED,WAAOf,QAAQF,WAAWsB,OAAnB,EAA4Bb,IAA5B,EAAkCQ,gBAAlC,CAAP;AACD,GArBM,EAqBJM,KArBI,CAqBGC,GAAD,IAAS;AAChBA,QAAIC,OAAJ,GAAe,8BAA6BjB,eAAekB,KAAf,CAAqB,CAArB,EAAwB,EAAxB,CAA4B,OAAMF,IAAIC,OAAQ,EAA1F;AACAD,QAAIG,KAAJ,GAAa,8BAA6BnB,eAAekB,KAAf,CAAqB,CAArB,EAAwB,EAAxB,CAA4B,OAAMF,IAAIG,KAAM,EAAtF;;AAEA,UAAMH,GAAN;AACD,GA1BM,CAAP;AA2BD;;AAED;;;;;;;;;AASA,SAASI,YAAT,CAAsBpB,cAAtB,EAAsCE,KAAtC,EAA6CD,IAA7C,EAAmDoB,QAAnD,EAA6D;AAC3D,MAAI,CAACA,QAAD,IAAa,OAAOnB,KAAP,KAAiB,QAA9B,IAA0C,OAAOD,IAAP,KAAgB,UAA9D,EAA0E;AACxEoB,eAAWpB,IAAX;AACAA,WAAOC,KAAP;AACAA,YAAQ,IAAR;AACD;AACD,MAAI,CAACF,cAAL,EAAqB;AACnBqB,aAAS,EAAT;AACA;AACD;;AAEDtB,gBAAcC,cAAd,EAA8BC,IAA9B,EAAoCC,KAApC,EACGQ,IADH,CAEIY,UAAUC,QAAQC,QAAR,CAAiBH,QAAjB,EAA2B,IAA3B,EAAiCC,MAAjC,CAFd,EAGIN,OAAOO,QAAQC,QAAR,CAAiBH,QAAjB,EAA2BL,GAA3B,CAHX;AAKD;;AAEDS,QAAQ1B,aAAR,GAAwBA,aAAxB;AACA0B,QAAQL,YAAR,GAAuBA,YAAvB","file":"compile-render.js","sourcesContent":["'use strict';\n\nconst md5 = require('md5');\nconst Cache = require('node-cache');\n\nconst Benchpress = require('./benchpress');\nconst precompile = require('./precompile');\nconst runtime = require('./runtime');\nconst evaluate = require('./evaluate');\n\nconst compileRenderCache = new Cache({\n  stdTTL: 60 * 60, // one hour\n  useClones: false,\n});\n\n/**\n * Compile a template and render it\n * Automatically caches template function based on hash of input template\n * @param {string} templateSource\n * @param {any} data\n * @param {string} [block]\n * @returns {Promise<string>} - rendered output\n */\nfunction compileRender(templateSource, data, block) {\n  const hash = md5(templateSource);\n\n  return Promise.try(() => {\n    const cached = compileRenderCache.get(hash);\n    if (cached) {\n      compileRenderCache.ttl(hash);\n      return cached;\n    }\n\n    const templateFunction = precompile(templateSource, {})\n      .then(code => evaluate(code));\n\n    compileRenderCache.set(hash, templateFunction);\n    return templateFunction;\n  }).then((templateFunction) => {\n    if (block) {\n      templateFunction = templateFunction.blocks && templateFunction.blocks[block];\n    }\n    if (!templateFunction) {\n      return '';\n    }\n\n    return runtime(Benchpress.helpers, data, templateFunction);\n  }).catch((err) => {\n    err.message = `Render failed for template ${templateSource.slice(0, 20)}:\\n ${err.message}`;\n    err.stack = `Render failed for template ${templateSource.slice(0, 20)}:\\n ${err.stack}`;\n\n    throw err;\n  });\n}\n\n/**\n * Alias for {@link compileRender}, but uses a callback\n * @param {string} templateSource\n * @param {string} [block]\n * @param {any} data\n * @param {function} callback - (err, output)\n *\n * @deprecated - Use {@link compileRender} instead\n */\nfunction compileParse(templateSource, block, data, callback) {\n  if (!callback && typeof block === 'object' && typeof data === 'function') {\n    callback = data;\n    data = block;\n    block = null;\n  }\n  if (!templateSource) {\n    callback('');\n    return;\n  }\n\n  compileRender(templateSource, data, block)\n    .then(\n      output => process.nextTick(callback, null, output),\n      err => process.nextTick(callback, err),\n    );\n}\n\nexports.compileRender = compileRender;\nexports.compileParse = compileParse;\n"]}