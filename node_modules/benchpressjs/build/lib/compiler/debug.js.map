{"version":3,"sources":["../../../lib/compiler/debug.js"],"names":["fs","require","path","prefixer","tokenizer","parser","compiler","blocks","codegen","runtime","collapseWhitespace","str","replace","trim","testPath","join","__dirname","testTemplate","readFileSync","toString","testData","testHelpers","canspeak","data","isHuman","name","test","forum","double","iterator","animals","everything","template","helpers","prefixed","tokens","parsed","fnAst","ast","code","eval","output","compiled","rooms","out"],"mappings":"AAAA;;AAEA;;AAEA;;;;AAIA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,MAAME,WAAWF,QAAQ,mCAAR,CAAjB;AACA,MAAMG,YAAYH,QAAQ,oCAAR,CAAlB;AACA,MAAMI,SAASJ,QAAQ,iCAAR,CAAf;AACA,MAAMK,WAAWL,QAAQ,mCAAR,CAAjB;AACA,MAAMM,SAASN,QAAQ,iCAAR,CAAf;AACA,MAAMO,UAAUP,QAAQ,kCAAR,CAAhB;AACA,MAAMQ,UAAUR,QAAQ,yBAAR,CAAhB;;AAEA,MAAMS,qBAAqBC,OAAOA,IAC/BC,OAD+B,CACvB,2BADuB,EACM,IADN,EAE/BA,OAF+B,CAEvB,SAFuB,EAEZ,GAFY,EAG/BA,OAH+B,CAGvB,YAHuB,EAGT,MAHS,EAI/BC,IAJ+B,EAAlC;;AAMA;AACA,MAAMC,WAAWZ,KAAKa,IAAL,CAAUC,SAAV,EAAqB,gDAArB,CAAjB;;AAEA,MAAMC,eAAejB,GAAGkB,YAAH,CAAgBJ,QAAhB,EAA0BK,QAA1B,EAArB;;AAEA,MAAMC,WAAWnB,QAAQ,uBAAR,CAAjB;;AAEA,MAAMoB,cAAc;AAClBC,WAASC,IAAT,EAAe;AACb,WAAQA,KAAKC,OAAL,IAAgBD,KAAKE,IAAL,KAAc,OAA/B,GAA0C,WAA1C,GAAwD,cAA/D;AACD,GAHiB;AAIlBC,OAAKH,IAAL,EAAW;AACT,WAAOA,KAAKI,KAAL,IAAc,CAACJ,KAAKK,MAA3B;AACD,GANiB;AAOlBJ,UAAQD,IAAR,EAAcM,QAAd,EAAwB;AACtB,WAAON,KAAKO,OAAL,CAAaD,QAAb,EAAuBL,OAA9B;AACD;AATiB,CAApB;;AAYA,SAASO,UAAT,CAAoBC,QAApB,EAA8BT,IAA9B,EAAoCU,OAApC,EAA6C;AAC3C,QAAMC,WAAW/B,SAAS6B,QAAT,CAAjB;AACA,QAAMG,SAAS/B,UAAU8B,QAAV,CAAf;AACA,QAAME,SAAS/B,OAAO8B,MAAP,CAAf;AACA,QAAME,QAAQ/B,SAAS8B,MAAT,EAAiB,EAAjB,CAAd;AACA,QAAME,MAAM/B,OAAO8B,KAAP,CAAZ;AACA,QAAME,OAAO/B,QAAQ8B,GAAR,CAAb;AACAE,OAAKD,IAAL;AACA;AACA,QAAME,SAAShC,QAAQwB,OAAR,EAAiBV,IAAjB,EAAuBmB,SAASnC,MAAT,CAAgBoC,KAAvC,CAAf;;AAEA,SAAOF,MAAP;AACD;;AAED,MAAMG,MAAMlC,mBAAmBqB,WAAWd,YAAX,EAAyBG,QAAzB,EAAmCC,WAAnC,CAAnB,CAAZ;;AAEA","file":"debug.js","sourcesContent":["'use strict';\n\n/* eslint no-debugger: off, no-unused-vars: off, no-eval: off, no-undef: off */\n\n/**\n * This file is for debugging failing tests. It lets you inspect each step of compilation easily.\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst prefixer = require('../../build/lib/compiler/prefixer');\nconst tokenizer = require('../../build/lib/compiler/tokenizer');\nconst parser = require('../../build/lib/compiler/parser');\nconst compiler = require('../../build/lib/compiler/compiler');\nconst blocks = require('../../build/lib/compiler/blocks');\nconst codegen = require('../../build/lib/compiler/codegen');\nconst runtime = require('../../build/lib/runtime');\n\nconst collapseWhitespace = str => str\n  .replace(/(?:[ \\t]*[\\r\\n]+[ \\t]*)+/g, '\\n')\n  .replace(/[\\t ]+/g, ' ')\n  .replace(/ (<)|(>) /g, '$1$2')\n  .trim();\n\n// path.join(__dirname, '../../tmp/flags-detail.tpl')\nconst testPath = path.join(__dirname, '../../tests/templates/source/modern-helper.tpl');\n\nconst testTemplate = fs.readFileSync(testPath).toString();\n\nconst testData = require('../../tests/data.json');\n\nconst testHelpers = {\n  canspeak(data) {\n    return (data.isHuman && data.name === 'Human') ? 'Can speak' : 'Cannot speak';\n  },\n  test(data) {\n    return data.forum && !data.double;\n  },\n  isHuman(data, iterator) {\n    return data.animals[iterator].isHuman;\n  },\n};\n\nfunction everything(template, data, helpers) {\n  const prefixed = prefixer(template);\n  const tokens = tokenizer(prefixed);\n  const parsed = parser(tokens);\n  const fnAst = compiler(parsed, {});\n  const ast = blocks(fnAst);\n  const code = codegen(ast);\n  eval(code);\n  // const output = runtime(helpers, data, compiled);\n  const output = runtime(helpers, data, compiled.blocks.rooms);\n\n  return output;\n}\n\nconst out = collapseWhitespace(everything(testTemplate, testData, testHelpers));\n\ndebugger;\n"]}