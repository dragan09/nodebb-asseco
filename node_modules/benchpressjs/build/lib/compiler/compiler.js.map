{"version":3,"sources":["../../../lib/compiler/compiler.js"],"names":["t","require","c","options","PathExpression","path","iterPattern","paths","split","reduce","prev","key","matches","match","rest","index","stringLiteral","KEY_I","Guard","unsafe","out","p","memberExpression","CONTEXT","last","callExpression","GUARD","logicalExpression","ConcatStringList","outputs","i","length","binaryExpression","UnsafeIter","branch","iterSuffix","arr","identifier","output","functionExpression","blockStatement","variableDeclaration","variableDeclarator","subject","LENGTH","INDEX","numericLiteral","KEY","forStatement","updateExpression","expressionStatement","assignmentExpression","compile","body","returnStatement","transforms","StringLiteral","value","SimpleExpression","HelperExpression","HELPERS","helperName","args","HELPER","arrayExpression","OpenIf","nextBranch","test","tokenType","not","unaryExpression","alternate","skipThis","conditionalExpression","OpenIter","name","cleanName","iter","ITER","EACH","Text","RawMustache","expression","raw","EscapedMustache","ESCAPE","compiled","len","push","slice","compiler","parsed","opts","functionDeclaration","COMPILED","runtimeParams","module","exports"],"mappings":"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","file":"compiler.js","sourcesContent":["'use strict';\n\nconst t = require('babel-types');\n\nconst c = require('./constants');\n\nlet options;\n\n// Helpers for constructing AST nodes\nfunction PathExpression(path) {\n  const iterPattern = /^(.*)\\[(\\d+)]$/;\n  const paths = path.split('.').reduce((prev, key) => {\n    const matches = key.match(iterPattern);\n    if (matches) {\n      const [, rest, index] = matches;\n      return [...prev, t.stringLiteral(rest), c.KEY_I(index)];\n    }\n    return [...prev, t.stringLiteral(key)];\n  }, []);\n\n  return paths;\n}\nfunction Guard(path) {\n  const paths = PathExpression(path);\n\n  if (options.unsafe === true) {\n    return paths.reduce((out, p) => t.memberExpression(out, p, true), c.CONTEXT);\n  }\n\n  // precompile path expressions into\n  //   context && context['prop'] && context['prop'][5] ...\n  let last = c.CONTEXT;\n  return t.callExpression(c.GUARD, [\n    paths.reduce((out, p) => {\n      last = t.memberExpression(last, p, true);\n      return t.logicalExpression('&&', out, last);\n    }, last),\n  ]);\n}\n// take an array of string expressions\n// and convert it to direct concatenation like this\n//    a + b + c + d\nfunction ConcatStringList(outputs) {\n  let out = outputs[0];\n\n  for (let i = 1; i < outputs.length; i += 1) {\n    out = t.binaryExpression('+', out, outputs[i]);\n  }\n\n  return out;\n}\n// inline iteration unsafely\n// only supports iterating over arrays-likes\nfunction UnsafeIter(branch) {\n  const key = c.KEY_I(branch.iterSuffix);\n\n  const arr = t.identifier('arr');\n  const output = t.identifier('output');\n\n  return t.callExpression(t.functionExpression(null, [], t.blockStatement([\n    t.variableDeclaration('var', [\n      t.variableDeclarator(arr, Guard(branch.subject.path)),\n      t.variableDeclarator(output, t.stringLiteral('')),\n      t.variableDeclarator(c.LENGTH, t.memberExpression(arr, c.LENGTH)),\n      t.variableDeclarator(c.INDEX, t.numericLiteral(0)),\n      t.variableDeclarator(key),\n      t.variableDeclarator(c.KEY),\n    ]),\n    t.forStatement(\n      null,\n      t.binaryExpression('<', c.INDEX, c.LENGTH),\n      t.updateExpression('++', c.INDEX),\n      t.blockStatement([\n        t.expressionStatement(t.assignmentExpression('=', key, c.INDEX)),\n        t.expressionStatement(t.assignmentExpression('=', c.KEY, c.INDEX)),\n        t.expressionStatement(t.assignmentExpression('+=', output, ConcatStringList(compile(branch.body)))),\n      ]),\n    ),\n    t.returnStatement(output),\n  ])), []);\n}\n\nconst transforms = {\n  StringLiteral(branch) {\n    return t.stringLiteral(branch.value);\n  },\n  SimpleExpression(branch) {\n    const path = branch.path;\n    if (path === '@root') {\n      return c.CONTEXT;\n    }\n    if (path === '@key') {\n      return c.KEY;\n    }\n    if (path === '@index') {\n      return c.INDEX;\n    }\n    if (path === '@first') {\n      return t.binaryExpression('===', c.INDEX, t.numericLiteral(0));\n    }\n    if (path === '@last') {\n      return t.binaryExpression('===', c.INDEX, t.binaryExpression(\n        '-',\n        c.LENGTH,\n        t.numericLiteral(1)\n      ));\n    }\n\n    return Guard(path);\n  },\n  HelperExpression(branch) {\n    if (options.unsafe) {\n      return t.callExpression(t.memberExpression(\n        c.HELPERS,\n        t.stringLiteral(branch.helperName),\n        true,\n      ), compile(branch.args));\n    }\n\n    return t.callExpression(c.HELPER, [\n      c.CONTEXT,\n      c.HELPERS,\n      t.stringLiteral(branch.helperName),\n      t.arrayExpression(compile(branch.args)),\n    ]);\n  },\n  OpenIf(branch, nextBranch) {\n    let test = transforms[branch.test.tokenType](branch.test);\n    if (branch.not) {\n      test = t.unaryExpression('!', test, true);\n    }\n\n    let alternate = t.stringLiteral('');\n    if (nextBranch && nextBranch.tokenType === 'Else') {\n      alternate = ConcatStringList(compile(nextBranch.body));\n\n      nextBranch.skipThis = true;\n    }\n\n    return t.conditionalExpression(test, ConcatStringList(compile(branch.body)), alternate);\n  },\n  OpenIter(branch) {\n    if (options.unsafe) {\n      const unsafe = UnsafeIter(branch);\n      unsafe.name = branch.name;\n      unsafe.cleanName = branch.cleanName;\n\n      return unsafe;\n    }\n\n    const key = c.KEY_I(branch.iterSuffix);\n\n    const iter = t.callExpression(c.ITER, [\n      Guard(branch.subject.path),\n      t.functionExpression(c.EACH, [\n        key,\n        c.INDEX,\n        c.LENGTH,\n      ], t.blockStatement([\n        t.variableDeclaration('var', [t.variableDeclarator(c.KEY, key)]),\n        t.returnStatement(ConcatStringList(compile(branch.body))),\n      ])),\n    ]);\n    iter.name = branch.name;\n    iter.cleanName = branch.cleanName;\n\n    return iter;\n  },\n  Text(branch) {\n    return t.stringLiteral(branch.value);\n  },\n  RawMustache(branch) {\n    return transforms[branch.expression.tokenType](branch.expression, branch.raw);\n  },\n  EscapedMustache(branch) {\n    return t.callExpression(\n      c.ESCAPE,\n      [transforms.RawMustache(branch)]\n    );\n  },\n};\n\n/**\n * Transform a template syntax tree into a Babylon AST\n * @param {object[]} body\n * @returns {object[]}\n */\nfunction compile(body) {\n  const compiled = [];\n  const len = body.length;\n  for (let i = 0; i < len; i += 1) {\n    const branch = body[i];\n    if (!branch.skipThis) {\n      compiled.push(transforms[branch.tokenType](branch, ...body.slice(i + 1)));\n    }\n  }\n\n  return compiled;\n}\n\n/**\n * Transform a template syntax tree into a Babylon AST\n * @param {object[]} parsed\n * @returns {object}\n */\nfunction compiler(parsed, opts) {\n  options = opts;\n  const compiled = compile(parsed);\n\n  return t.functionDeclaration(c.COMPILED, c.runtimeParams, t.blockStatement([\n    t.returnStatement(ConcatStringList(compiled)),\n  ]));\n}\n\ncompiler.transforms = transforms;\n\nmodule.exports = compiler;\n"]}