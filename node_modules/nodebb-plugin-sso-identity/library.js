(function(module) {
	"use strict";

	var User = require.main.require('./src/user');
	var db = require.main.require('./src/database');
	var meta = require.main.require('./src/meta');
	var nconf = require.main.require('nconf');
	var async = require.main.require('async');
	var passport = require.main.require('passport');
	var IdentityStrategy = require('passport-customidentity').Strategy;

	var winston = module.parent.require('winston');

	var authenticationController = require.main.require('./src/controllers/authentication');

	var constants = Object.freeze({
		'name': "sso",
		'admin': {
			'icon': 'fa-check-square',
			'route': '/plugins/sso-identity'
		}
	});

	var IdentitySso = {};

	IdentitySso.getStrategy = function(strategies, callback) {
		meta.settings.get('sso-identity', function(err, settings) {
			IdentitySso.settings = settings;

			if (!err && settings.id && settings.secret) {
				passport.use(new IdentityStrategy({
					clientID: settings.id,
					clientSecret: settings.secret,
					callbackURL: nconf.get('url') + '/auth/sso/callback',
					passReqToCallback: true,
					scope: nconf.get('oauth:scope') // fetches non-public emails as well
					,name:'sso'
				}, function(req, token, tokenSecret, profile, done) {
					if (req.hasOwnProperty('user') && req.user.hasOwnProperty('uid') && req.user.uid > 0) {
						// Save GitHub -specific information to the user
						User.setUserField(req.user.uid, 'identityid', profile.id);
						db.setObjectField('identityid:uid', profile.id, req.user.uid);
						return done(null, req.user);
					}

					//var email = Array.isArray(profile.emails) && profile.emails.length ? profile.emails[0].value : '';

					var id=profile.id;
					//var username='new test';
					//var email='newasseco@asseco-see.mk'
					var username=profile.username;
					var email=profile.email;
					var imageUrl='';

					IdentitySso.login(id, username, email, imageUrl, function(err, user) {
						if (err) {
							return done(err);
						}

						authenticationController.onSuccessfulLogin(req, user.uid);
						done(null, user);
					});
				}));

				strategies.push({
					name: 'sso',
					url: '/auth/sso',
					callbackURL: '/auth/sso/callback',
					icon: constants.admin.icon,
					scope: nconf.get('oauth:scope').split(',')
					,name:'sso'
				});
			}

			callback(null, strategies);
		});
	};

	IdentitySso.appendUserHashWhitelist = function (data, callback) {
		data.whitelist.push('identityid');
		return setImmediate(callback, null, data);
	};

	IdentitySso.getAssociation = function(data, callback) {
		User.getUserField(data.uid, 'identityid', function(err, identityid) {
			if (err) {
				return callback(err, data);
			}

			if (identityid) {
				data.associations.push({
					associated: true,
					name: constants.name,
					icon: constants.admin.icon,
					deauthUrl: nconf.get('url') + '/deauth/sso',
				});
			} else {
				data.associations.push({
					associated: false,
					url: nconf.get('url') + '/auth/sso',
					name: constants.name,
					icon: constants.admin.icon
				});
			}

			callback(null, data);
		})
	};

	IdentitySso.login = function(identityid, username, email, avatar_url, callback) {
		if (!email) {
			email = username + '@users.noreply.github.com';
		}

		IdentitySso.getUidByGitHubID(identityid, function(err, uid) {
			if (err) {
				return callback(err);
			}

			if (uid) {
				// Existing User
				callback(null, {
					uid: uid
				});
			} else {
				// New User
				var success = function(uid) {
					// trust github's email
					User.setUserField(uid, 'email:confirmed', 1);
					db.sortedSetRemove('users:notvalidated', uid);

					User.setUserField(uid, 'identityid', identityid);

					//set profile picture
					User.setUserField(uid, 'uploadedpicture', avatar_url);
					User.setUserField(uid, 'picture', avatar_url);

					db.setObjectField('identityid:uid', identityid, uid);
					callback(null, {
						uid: uid
					});
				};

				User.getUidByEmail(email, function(err, uid) {
					if (!uid) {
						// Abort user creation if registration via SSO is restricted
						// if (IdentitySso.settings.disableRegistration === 'on') {
						// 	return callback(new Error('[[error:sso-registration-disabled, GitHub]]'));
						// }

						User.create({username: username, email: email}, function(err, uid) {
							if (err !== null) {
								callback(err);
							} else {
								success(uid);
							}
						});
					} else {
						success(uid); // Existing account -- merge
					}
				});
			}
		});
	};

	IdentitySso.getUidByGitHubID = function(identityid, callback) {
		db.getObjectField('identityid:uid', identityid, function(err, uid) {
			if (err) {
				callback(err);
			} else {
				callback(null, uid);
			}
		});
	};

	IdentitySso.addMenuItem = function(custom_header, callback) {
		custom_header.authentication.push({
			"route": constants.admin.route,
			"icon": constants.admin.icon,
			"name": "Identity server"
		});

		callback(null, custom_header);
	};

	IdentitySso.init = function(data, callback) {
		var hostHelpers = require.main.require('./src/routes/helpers');

		function renderAdmin(req, res) {
			res.render('admin/plugins/sso-identity', {
				callbackURL: nconf.get('url') + '/auth/sso/callback'
			});
		}

		data.router.get('/admin/plugins/sso-identity', data.middleware.admin.buildHeader, renderAdmin);
		data.router.get('/api/admin/plugins/sso-identity', renderAdmin);

		hostHelpers.setupPageRoute(data.router, '/deauth/sso', data.middleware, [data.middleware.requireUser], function (req, res) {
			res.render('plugins/sso-identity/deauth', {
				service: "Identity",
			});
		});
		data.router.post('/deauth/sso', [data.middleware.requireUser, data.middleware.applyCSRF], function (req, res, next) {
			IdentitySso.deleteUserData({
				uid: req.user.uid,
			}, function (err) {
				if (err) {
					return next(err);
				}

				res.redirect(nconf.get('relative_path') + '/me/edit');
			});
		});

		callback();
	};

	IdentitySso.deleteUserData = function(data, callback) {
		var uid = data.uid;

		async.waterfall([
			async.apply(User.getUserField, uid, 'identityid'),
			function(oAuthIdToDelete, next) {
				db.deleteObjectField('identity:uid', oAuthIdToDelete, next);
			},
			async.apply(db.deleteObjectField, 'user:' + uid, 'identity'),
		], function(err) {
			if (err) {
				winston.error('[sso-identity] Could not remove OAuthId data for uid ' + uid + '. Error: ' + err);
				return callback(err);
			}
			callback(null, uid);
		});
	};

	module.exports = IdentitySso;
}(module));
